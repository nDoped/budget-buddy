name: PHP Composer

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-24.04
    services:
      mysql:
        image: mysql:8.0
        env:
          # The MySQL docker container requires these environment variables to be set
          # so we can create and migrate the test database.
          # See: https://hub.docker.com/_/mysql
          MYSQL_USER: dbuser
          MYSQL_DATABASE: testdb
          MYSQL_PASSWORD: secret
          MYSQL_ROOT_PASSWORD: testrootpass
        ports:
          # Opens port 3306 on service container and host
          # https://docs.github.com/en/actions/using-containerized-services/about-service-containers
          - 3306:3306
          # Before continuing, verify the mysql container is reachable from the ubuntu host
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Validate composer.json and composer.lock
      run: cd app && composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: cd app && composer install --prefer-dist --no-progress

    # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
    # Docs: https://getcomposer.org/doc/articles/scripts.md

    - name: Create APP_KEY
      run: cd app && echo "APP_KEY=" > .env

    - name: Generate APP_KEY
      run: cd app && php artisan key:generate

    - name: Install front end deps
      run: cd app && npm install

    - name: Build assets
      run: cd app && npm run build

    - name: Wait for MySQL
      run: sleep 15

    - name: Migrate DB
      run: cd app && php artisan migrate
      env:
        APP_DEBUG: true
        APP_ENV: local
        DB_PORT: ${{ job.services.mysql.ports['3306'] }}
        DB_DATABASE: testdb
        DB_USERNAME: dbuser
        DB_PASSWORD: secret
        DB_HOST: 127.0.0.1
        DB_CONNECTION: mysql

    - name: Clear Config
      run: cd app && php artisan config:clear

    - name: Run backend tests
      run: cd app && vendor/bin/phpunit
      env:
        DB_PORT: ${{ job.services.mysql.ports['3306'] }}
        DB_DATABASE: testdb
        DB_USERNAME: dbuser
        DB_PASSWORD: secret
        DB_HOST: 127.0.0.1
        DB_CONNECTION: mysql

    - name: Run frontend tests
      run: cd app && npm run test -- --mode production
      env:
        LARAVEL_BYPASS_ENV_CHECK: 1
